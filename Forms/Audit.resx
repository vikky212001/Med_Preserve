<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcO
        FAAAAAAANVxBDj+EVC1ClltMRKBfWEaiYVlCmFxRQIpXNjhpRxUeFBsCJCsmAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADFF
        NwArFiQCQINUK0elY35OvG/EUsh161TRevpV1Xz9VdV8/lXTevtSy3bwT8Bx0UmsZpJCjVg+OFJABjxq
        SgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkB
        GgBDmV4AOnBKFkmnZX9RxXTiVdR7/1jbf/9X23//S79v/0CRU/9Ahkv/Raxk/1PUe/9Y3ID/Vtd9/1LK
        dvBLsGmeP4JTKYv/+AAuLisAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABKIzcATtV4AD+EVCtMtmy6VdN7/Vfafv9Y3H//Tsd0/z+GTP9leTf/qqdF/7u2Sv+CiTv/R3c+/0Wu
        Zf9W2n7/V9p//1bWfP9PwHHXQ5RcTAAAAAEzQjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKR8mAEasZQBAh1UuTr1vzFbXff9X2X7/V9t//0awZ/9Pcjn/qqdE/+LcWf/p5F3/6eRd/+ji
        XP/Kw0//cn44/z+OUf9U1Hz/V9p//1fZfv9RxnTnRZheU8r//wA7TUAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABBhlUAPXZOG065bsBW2H3/V9l+/1jbf/9Eq2P/X3Q2/83HUf/p5F3/5uFc/+bh
        XP/m4Vz/5uFc/+jjXf/j3Vr/kJI9/z+ESv9U1Hz/V9p+/1fZfv9RxHPhQ45ZPEq1agA7LDcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAOFlBABsACgNJq2eOVdR8/1fZfv9Y23//Sbls/1pyNv/TzVP/6ONd/+bh
        XP/m4Vv/5N9Z/+TfWf/l4Fr/5uFc/+fiXP/n4Vz/kJI9/z+PUv9X2n7/V9l+/1fYfv9NuW2+OGlHFDt3
        TgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEnl8AQo5YOlLJdutX2n7/V9p+/1LRev9Gdj7/w71N/+nk
        Xf/m4Vz/6ONb/7m2cP+Bf6z/gH6v/6Oggv/l4Fr/5uFc/+fiXP/i3Fr/b303/0awZv9Y23//V9l+/1TS
        evxHomJrXP+OAEFDQgAAAAAAAAAAAAAAAAAAAAAAMEg4AAAAAAFKr2iWVtd9/1fZfv9Y3ID/QZxa/5CS
        Pf/p413/5uFc/+bhXP/p41n/oJ2H/1FR+/9RUf//f32r/+TfWf/m4Vz/5uFc/+jjXf/Jwk//R3hA/1PT
        e/9X2X7/V9l+/069cMg0YkISOG1HAAAAAAAAAAAAAAAAAAAAAAA7eU0AO3dNHVDDctpX2n7/V9l+/1LQ
        ef9Odjz/1c5U/+fiXP/o41v/6eNa/+zlV/+joIX/VFT7/1RU//+CgKr/5+FX/+njWv/p41r/5+Fc/+ji
        XP+Dijv/RKtj/1jcf/9X2n7/U8549kOVW0dEomEAAAAAAAAAAAAAAAAAAAAAAEajYQBEllxJVM95+Ffa
        fv9Y3H//RK1k/4SLO//p413/5N9c/8K+a/+3s3T/urZy/4iGmv9VVfz/VVX//3JxuP+3s3L/uLR0/7u3
        cP/e2V3/6eRd/8K8Tf9DgUf/Vtl+/1fZfv9W1nz/SapmgGD/lQBfc2UAAAAAAAAAAADO5NUAUdV5AEil
        ZHBV1Hv/V9l+/1fbf/9BiEz/ubRJ/+nkXf/d2Fz/cnC+/1ZW9P9YWPH/V1f1/1dX//9XV///V1f4/1hY
        8f9YWPP/Xl3Z/8bCZ//o41v/4dpZ/196Ov9OyXX/V9p+/1fZfv9MtWypCAAAA0RYSgAAAAAAAAAAAE9n
        VgBp/6AASaxnh1bXff9X2X7/U9N7/095Pv/Y0VT/6eRc/93YW/9ubcf/U1P//1VV//9WVv//V1f//1dX
        //9WVv//VVX//1VV//9aWuX/xcFo/+jjW//p413/ho08/0WvZv9Y23//V9l+/027br0lMCgIME45AAAA
        AAAAAAAAHDAiAH3/twBGrWWJVtd9/1faf/9NxXP/Z305/+Xebv/RybD/1cqS/4eFov9tbcj/b27F/2Ji
        1v9WVv7/V1f//11c4/9vbsX/b27H/3RztP/Lx2L/6ONb/+rkXf+npUT/QZhX/1jcgP9X2X7/TLxuwBUs
        HAkcPiYAAAAAAAAAAABshnMAXv+QAEmsZ4FW1nz/WNt//0e2av9/iTn/3tec/396/f+ultj/4tto/9zX
        W//e2Vn/nJmH/1RV+/9VVf//fnyr/9rVWf/a1Vv/y8Nj/8vAa//Z01//6ONe/764S/9CiEz/V9t//1fZ
        fv9Ou2+5KygqBzxWQwAAAAAAAAAAAAAAAABNw3EARqJiZFXTe/9Y3ID/RKpj/4+UPf/p433/ppjn/8ey
        s//g2l7/5+Jc/+rkWf+in4f/VFT7/1RU//+BgKv/5uFZ/9/aW//TxHr/xLV9/9XKbf/i4WD/ysVS/0aA
        Rf9W2X7/V9h9/0uzap0AAAAAQ1VIAAAAAAAAAAAAAAAAAEOWXABDkFo6U8x38VjdgP9Co17/mZtA/+zo
        aP++rNj/zruY/8vDVv/l4Fz/6eRZ/6KghP9VVfH/VFX3/4KApf/l4Fn/495b/87Da//PwH7/yLte/9fP
        Wv/Ry1P/SXxC/1XXfv9V1Hv/SKVkblLXegCBlIcAAAAAAAAAAAAAAAAAPG5LADllRhFPv3DIWN2A/0Kh
        Xf+dnUH/7Odp/7yqyv/MupP/ysJX/+XfXP/n4lz/0cxj/7Wxef+0sHr/xsJp/+bhW//n4V3/3dZd/8nA
        Zf/Et1f/ybxU/9HLUv9Le0H/Vdd9/1LKdutCjFgzQpJaAAAAAAAAAAAAAAAAAAAAAAA0OzYAaf+kAEio
        ZXdX133/QqNe/5mbQP/t52j/wLOU/8zBe//NxVj/5d9c/+bhXP/n4lv/6eRa/+nkWv/o41v/5uFc/+bh
        XP/k4V3/z8tj/7WuYv+8tlP/z8hR/0l9Qv9V133/TbdsrCw0Lgc4YUQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA/h1QAPH1QIFHFdNRErGT/g4c5/+bfXP/o4Hj/5uBq/+PdW//m4Vz/5uFc/+bhXP/m4Vz/5uFc/+bh
        XP/m4Vz/5uFc/+XhXf/j4Fz/19Ng/9PNXP++tkn/Q39F/1LMePFDllxISrNpAC8NHwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAC8+MwBo/6EASKNjYU2+b/ZAfUX/Ynk4/5KUPf/BvEz/39lY/+njXf/p5F3/5+Jc/+bh
        XP/m4Vz/5uFc/+jjXf/q5F3/5d9b/9HKUv+opkT/d4Q6/0x1PP9EpF//TLJqkycmJwU3Y0QAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5uTAA2SjwITK9pkFTSev1NxnP/QqNe/0KBR/9Zdzr/h4w8/7iz
        Sf/a01b/6OJc/+rkXf/i3Fn/ycNP/5ycQf9rfTn/SXpA/0CUVP9IuWz/UtB6/0+7b7xAe1EbQ4xZAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEmGXABCclERTLFqmFXTe/pY3YD/Vtp//0/L
        dv9Eq2T/QIdM/1J2O/98hjr/i488/2F4OP9EfEP/QJtZ/0q/cP9U1Xz/WN2A/1fYff9PvG++RYlaJ1Gs
        bAAGAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEKBVQA9bEsMSahmelLK
        dutX2H3/WNp//1jcgP9X23//Uc95/0azaP9Cp2H/TcVz/1XYfv9Y3ID/WNt//1fZfv9Uz3n3TLNrn0GC
        VR5JpmUADwsOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADdZ
        QQAuLS4DRpdePE64bqpSy3bvVtV8/1fZfv9X2n//WNyA/1jdgP9Y23//V9l+/1bXff9Tznj3T75wwkmh
        Y1g7Y0cKQH1TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHQAQAA2eUsAOVpDCEGOWDhJqmZ9Trlutk/BctRTx3bhVMh34lDCctlOvG/AS69pjkOX
        XUo7bEoQMv94AEYeNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAEgAHL/6AA0QzgHN2ZFFUqFXCBRjWMhOGxIGDZP
        PQojABAAKxciAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////8Af//4AB//8AAP/+AAA//AAAP/gAAB/wAAAP8AAAD+AA
        AAfgAAAH4AAAB+AAAAPgAAAD4AAAA+AAAAPgAAAH4AAAB+AAAAfwAAAH8AAAD/gAAA/4AAAf/AAAP/4A
        AH//AAD//8AD///4H/////////////////8=
</value>
  </data>
</root>